/**
 * Flex layout .flex --> .unit-* [+.flex] --> .unit-* [+.flex] --> ...
 *
 * With .padded, .vfill and borders (.flex have no height by default) as spacing helpers.
 *
 * Note: .flex and .unit-* have no position:relative.
 * Note: .unit-* as a flexbox item can NOT nest another .flex container, 
 * 		 put the .flex directly onto .unit-* as the container instead!
 * Note: .unit-* as a flexbox item can NOT nest another <any tag> el container for it to have height: 100%,
 * 		 since itself is already stretched by align-items. Use the .unit-* as the el container!
 *
 * @author Tim Lauv
 * @created 2017.05.27
 */

.flex {
	display: flex;
	width: 100%;

	.box-sizing();
	.paddable();
	.vfillable();
	.borders();

	&.vertical {
		flex-direction: row;
		&.reverse {
			flex-direction: row-reverse;
		}
	}

	&.horizontal {
		flex-direction: column;
		&.reverse {
			flex-direction: column-reverse;
		}
	}

	.unit, .unit-1 {
		flex: 1 1 0;
		.flex-unit();
	}

	.unit-2 {
		flex: 2 2 0;
		.flex-unit();
	}

	.unit-3 {
		flex: 3 3 0;
		.flex-unit();
	}
}

//shared unit measures in a flex container
.flex-unit() {
    //this one doesn't honor position: relative;
    //this one doesn't honor .vfill helpers and immediate el control;
    min-height: 6 * @gap-padded-size;
    .box-sizing();
    .paddable();
    .borders();
    //use the .unit itself as the view <div> (instead of another div inside a .vfill like in a .deck)
    //&.center {
    //    align-self: center;
    //}
}